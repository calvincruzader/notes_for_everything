Master notes for the entire class. (When done, parse through the notes to make it such that information is retained for you optimally.)

entity class: Java class that is mapped to a database table

map classes to tables and fields to columns

sessionfactory 
  - reads hibernate config files 
  - creates sessions
session
  - wrapper around jdbc 
  - saves/retrieves objects 
  
.configure("hibernate.cfg.xml") is the default

CRUD

so, you can update the objects by grabbing them from the database, updating them as Java objects, and then committing them back into the db via hibernate
OR, you can update them via .createQuery() in the database itself


db operation: CASCADE 
deletes an entry and it's entries in foreign keys, DEPENDS ON USE CASE (don't want to delete course if a student is deleted)
-----
Hibernate Mappings 

Summary of Activity: Learned how to do JPA/Hibernate of one-to-many/many-to-one mappings

Cascading: Allows us to propagate entity state changes from Parents to Childs entities
  - types: DETACH, MERGE, PERSIST, REFRESH, REMOVE, ALL, orphanRemoval

@GeneratedValue specifies that a value will be automatically generated for that field

GenerationType : defines the types of primary key generation strategies
GenerationType.IDENTITY indicates that a PERSISTENCE provider must assign primary keys for the entity using the DB's ID column

OneToMany/ManyToOne nuances:  
  - @JoinColumn: indicates that this entity is the owner of the relationship (and has a foreign key to the referenced table)
    - @JoinColumn(name='JobId')
  - mappedBy: an inverse of the indication above; that is, the owner of the relationship is the other entity
    - @OneToMany(mappedBy='<field name in the other entity>')
    - @OneToMany(mappedBy='instructor')

Lazy Loading vs Easy Loading 

